name: Archlinux aarch64 Raspberry Pi Image Builder
on: [push]

permissions:
  contents: write

jobs:
  build-image:
    name: Build Archlinux aarch64 Raspberry Pi Image
    env:
      INSTALL_REQUIREMENTS: true
      LOOP_IMAGE_SIZE: 4G
      DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
      TRANSFERSH_URL: ${{ secrets.TRANSFERSH_URL }}
      ARM_VERSION: aarch64
      # IMAGE_NAME_PREFIX: sz-arch
      # RPI_MODEL: 5
      # DEFAULT_LOCALE: en_US.UTF-8
      # TIMEZONE: Europe/Paris
      # KEYMAP: us-acentos
      SSH_PUB_KEY: ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIKMidTQ6KGfZtonNKd1HtNPPDiPtzEmlg5yOduvmZzTA valerius laptop
      # PACKAGES: arp-scan base-devel dosfstools git mkinitcpio-utils neovim nftables openssh python qrencode rsync sudo tailscale uboot-tools unzip zerotier-one zsh
    runs-on: ubuntu-latest
    container:
      image: archlinux:latest
      options: --privileged
    environment: main
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Load Environment Variables
      run: |
        set -a
        source build_config.env
        set +a
        while IFS= read -r line; do
          if [[ "$line" =~ ^[[:alnum:]_]+=.+ ]]; then
            echo "$line" >> $GITHUB_ENV
          fi
        done < build_config.env

    - name: Generate Dynamic Variables
      run: |
        echo "RPI_HOSTNAME=sz-$(git rev-parse --short HEAD)-rpi${{ env.RPI_MODEL }}" >> $GITHUB_ENV
        echo "WORKDIR_BASE=${{ github.workspace }}/run-${{ github.run_id }}" >> $GITHUB_ENV
        echo "IMAGE_NAME=${{ env.IMAGE_NAME_PREFIX }}-${{ env.ARM_VERSION }}-rpi${{ env.RPI_MODEL }}_v$(git rev-parse --short HEAD).img" >> $GITHUB_ENV
        echo "LOOP_IMAGE_PATH=${{ github.workspace }}/run-${{ github.run_id }}/${{ env.IMAGE_NAME_PREFIX }}-${{ env.ARM_VERSION }}-rpi${{ env.RPI_MODEL }}-v$(git rev-parse --short HEAD).img" >> $GITHUB_ENV
        echo "DISTRO=arch" >> $GITHUB_ENV
        echo "ARCH_AARCH64_IMG_URL=http://os.archlinuxarm.org/os/ArchLinuxARM-rpi-${{ env.ARM_VERSION }}-latest.tar.gz" >> $GITHUB_ENV
        echo "ARCH_AARCH64_IMG_URL_MD5=http://os.archlinuxarm.org/os/ArchLinuxARM-rpi-${{ env.ARM_VERSION }}-latest.tar.gz.md5" >> $GITHUB_ENV
        echo "SHORT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
        echo "ROOT_PASSWORD=$(tr -dc A-Za-z0-9 </dev/urandom | head -c 17)" >> $GITHUB_ENV
        echo "SSH_PUB_KEY=$SSH_PUB_KEY" >> $GITHUB_ENV

    - name: Update system and install dependencies
      run: |
        pacman -Syu --noconfirm
        pacman -S --noconfirm qemu-user-static-binfmt qemu-user-static dosfstools wget libarchive sudo arch-install-scripts parted e2fsprogs btrfs-progs mtools util-linux git

    - name: Create Work Folder and apply permissions
      run: |
        mkdir -p $WORKDIR_BASE
        chmod -R 755 $WORKDIR_BASE
        echo "Created $WORKDIR_BASE and applied permissions"

    - name: Create Image File
      run: |
        fallocate -l $LOOP_IMAGE_SIZE $LOOP_IMAGE_PATH

    - name: Download Archlinux aarch64 Image
      run: |
        cd $WORKDIR_BASE
        wget -q $ARCH_AARCH64_IMG_URL -O $WORKDIR_BASE/ArchLinuxARM-rpi-${{ env.ARM_VERSION }}-latest.tar.gz
        wget -q $ARCH_AARCH64_IMG_URL_MD5 -O $WORKDIR_BASE/ArchLinuxARM-rpi-${{ env.ARM_VERSION }}-latest.tar.gz.md5
        md5sum -c $WORKDIR_BASE/ArchLinuxARM-rpi-${{ env.ARM_VERSION }}-latest.tar.gz.md5

    - name: Setup Loop Device
      run: |
        losetup -fP $LOOP_IMAGE_PATH
        LOOP_DEVICE=$(losetup -j $LOOP_IMAGE_PATH | cut -d: -f1)
        echo "Loop device is $LOOP_DEVICE"
        echo "LOOP_DEVICE=$LOOP_DEVICE" >> $GITHUB_ENV

    - name: Create Partitions
      run: |
        parted --script $LOOP_DEVICE mklabel msdos
        parted --script $LOOP_DEVICE mkpart primary fat32 1MiB 257MiB
        parted --script $LOOP_DEVICE mkpart primary ext4 257MiB 100%
        parted --script $LOOP_DEVICE set 1 boot on
        parted --script $LOOP_DEVICE print

    - name: Format Partitions
      run: |
        mkfs.vfat -F32 ${LOOP_DEVICE}p1 -n PI-BOOT
        mkfs.ext4 -q -E lazy_itable_init=0,lazy_journal_init=0 -F ${LOOP_DEVICE}p2 -L PI-ROOT

    - name: Mount Partitions
      run: |
        mkdir -p $WORKDIR_BASE/root
        mount ${LOOP_DEVICE}p2 $WORKDIR_BASE/root
        mkdir -p $WORKDIR_BASE/root/boot
        mount ${LOOP_DEVICE}p1 $WORKDIR_BASE/root/boot
    
    - name: Extract Archlinux aarch64 Image
      run: |
        bsdtar -xpf $WORKDIR_BASE/ArchLinuxARM-rpi-${{ env.ARM_VERSION }}-latest.tar.gz -C $WORKDIR_BASE/root
        sync

    - name: Enable QEMU for cross-architecture support
      run: |
        # Make sure QEMU is available for cross-architecture emulation
        pacman -S --noconfirm qemu-user-static
        systemctl start systemd-binfmt || echo "systemd-binfmt not available, continuing anyway"
        
        # Alternative way to set up binfmt if systemd is not available
        if [ ! -f /proc/sys/fs/binfmt_misc/qemu-aarch64 ]; then
          echo "Setting up binfmt manually"
          mount -t binfmt_misc binfmt_misc /proc/sys/fs/binfmt_misc || true
          echo ':qemu-aarch64:M::\x7fELF\x02\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\xb7\x00:\xff\xff\xff\xff\xff\xff\xff\x00\xff\xff\xff\xff\xff\xff\xff\xff\xfe\xff\xff\xff:/usr/bin/qemu-aarch64-static:' > /proc/sys/fs/binfmt_misc/register || true
        fi

    - name: Run Build Script
      run: |
        chmod +x ./build_archlinux_rpi_aarch64_img.sh
        ./build_archlinux_rpi_aarch64_img.sh

    - name: Upload Image and Get URL
      if: success()
      run: |
        ISO_URL=$(curl --silent --show-error --progress-bar --upload-file $LOOP_IMAGE_PATH $TRANSFERSH_URL)
        echo "ISO_URL=$ISO_URL" >> $GITHUB_ENV
        echo "Uploaded $LOOP_IMAGE_PATH to $ISO_URL"
        
        # As a backup, also split the image for GitHub artifacts
        mkdir -p $WORKDIR_BASE/split
        cd $WORKDIR_BASE
        split -b 1G $LOOP_IMAGE_PATH "$WORKDIR_BASE/split/raspimage.part"
        echo "Image has been split for artifact upload"

    - name: Save Root Password to File
      run: |
        echo "$ROOT_PASSWORD" > root_password.txt
    
    - name: Upload Root Password as Artifact
      uses: actions/upload-artifact@v4
      with:
        name: root-password
        path: root_password.txt

    - name: Upload Image Parts as Artifact
      uses: actions/upload-artifact@v4
      with:
        name: raspberry-pi-image-parts
        path: ${{ env.WORKDIR_BASE }}/split/
        retention-days: 1

    - name: Create Release
      if: success()
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.SHORT_SHA }}
        release_name: Release ${{ env.SHORT_SHA }}
        body: |
          Release of Archlinux ${{ env.ARM_VERSION }} Raspberry Pi Image for model ${{ env.RPI_MODEL }}.

          **Changelog:**
          - Custom Archlinux build for Raspberry Pi `${{ env.RPI_MODEL }}`
          - Architecture: `${{ env.ARM_VERSION }}`
          - Locale: `${{ env.DEFAULT_LOCALE }}`
          - Timezone: `${{ env.TIMEZONE }}`
          - Packages included: ${{ env.PACKAGES }}

          The image is available for download: [Download Image](${{ env.ISO_URL }})

        draft: false
        prerelease: false

    - name: Notify Success
      if: success()
      run: |
        SUCCESS_MESSAGE="üéâ Awesome! The Raspberry Pi image build succeeded üöÄ\n\
        Release of Archlinux ${{ env.ARM_VERSION }} Raspberry Pi Image for model ${{ env.RPI_MODEL }}.\n\
        Author: ${{ github.actor }}\nBranch: ${{ github.ref }}\n\
        üóù Root Password is available as an artifact.\n\
        Commit Message: ${{ github.event.head_commit.message }}\n\
        [View Last Commit](https://github.com/${{ github.repository }}/commit/${{ github.sha }}) üìú\n\
        The image is available for download:\n[Download Image]($ISO_URL) üì¶\n\
        Filename: ${{ env.IMAGE_NAME }}\n"
        curl -X POST -H "Content-Type: application/json" -d "{\"content\": \"$SUCCESS_MESSAGE\"}" $DISCORD_WEBHOOK_URL  

    - name: Notify Failure
      if: failure()
      run: |
        FAILURE_MESSAGE="üòû Oops! The pipeline for **${{ github.repository }}** has failed.\n[Check the logs and troubleshoot here.](https://github.com/${{ github.repository }}/commit/${{ github.sha }}) üõ†Ô∏è"
        curl -X POST -H "Content-Type: application/json" -d "{\"content\": \"$FAILURE_MESSAGE\"}" $DISCORD_WEBHOOK_URL

    - name: Umount Loop Device
      if: always()
      run: |
        umount -R -fl ${WORKDIR_BASE}/root/boot || true
        umount -R -fl ${WORKDIR_BASE}/root || true
        echo "Unmounted $WORKDIR_BASE"
        sync

    - name: Release Loop Device
      if: always()
      run: |
        if [ -n "$LOOP_DEVICE" ]; then
          losetup -d $LOOP_DEVICE || true
          echo "Loop device $LOOP_DEVICE released"
        fi

    - name: Delete Work Folder
      if: always()
      run: |
        rm -rf $WORKDIR_BASE || true
        echo "Work folder deleted"