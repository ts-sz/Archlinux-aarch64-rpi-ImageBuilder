name: Build Archlinux aarch64 Raspberry Pi Image

on: [push]

permissions:
  contents: write

jobs:

  prepare-env:
    name: Load and export .env variables
    runs-on: ubuntu-latest
    outputs:
      RPI_MODEL: ${{ steps.export.outputs.RPI_MODEL }}
      IMAGE_HOST: ${{ steps.export.outputs.IMAGE_HOST }}
      ARCH_AARCH64_IMG_URL: ${{ steps.export.outputs.ARCH_AARCH64_IMG_URL }}
      ARCH_AARCH64_IMG_URL_MD5: ${{ steps.export.outputs.ARCH_AARCH64_IMG_URL_MD5 }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Load .env and export outputs
        id: export
        run: |
          set -o allexport
          source .env
          set +o allexport

          echo "RPI_MODEL=$RPI_MODEL" >> $GITHUB_ENV
          echo "IMAGE_HOST=$IMAGE_HOST" >> $GITHUB_ENV
          echo "ARCH_AARCH64_IMG_URL=$ARCH_AARCH64_IMG_URL" >> $GITHUB_ENV
          echo "ARCH_AARCH64_IMG_URL_MD5=$ARCH_AARCH64_IMG_URL_MD5" >> $GITHUB_ENV

          echo "::set-output name=RPI_MODEL::$RPI_MODEL"
          echo "::set-output name=IMAGE_HOST::$IMAGE_HOST"
          echo "::set-output name=ARCH_AARCH64_IMG_URL::$ARCH_AARCH64_IMG_URL"
          echo "::set-output name=ARCH_AARCH64_IMG_URL_MD5::$ARCH_AARCH64_IMG_URL_MD5"

  build-image:
    name: Build Image for model ${{ needs.prepare-env.outputs.RPI_MODEL }}
    needs: prepare-env
    runs-on: ubuntu-latest
    container:
      image: archlinux:latest
      options: --privileged
    env:
      RPI_MODEL: ${{ needs.prepare-env.outputs.RPI_MODEL }}
      IMAGE_HOST: ${{ needs.prepare-env.outputs.IMAGE_HOST }}
      ARCH_AARCH64_IMG_URL: ${{ needs.prepare-env.outputs.ARCH_AARCH64_IMG_URL }}
      ARCH_AARCH64_IMG_URL_MD5: ${{ needs.prepare-env.outputs.ARCH_AARCH64_IMG_URL_MD5 }}
      WORKDIR_BASE: ${{ github.workspace }}/run-${{ github.run_id }}
      LOOP_IMAGE_SIZE: 4G
      LOOP_IMAGE_PATH: ${{ github.workspace }}/rpi_aarch64.img
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Debug ENV
        run: |
          echo "Building for model $RPI_MODEL"
          echo "Downloading from $ARCH_AARCH64_IMG_URL"
          echo "Host to ping: $IMAGE_HOST"

      - name: Install dependencies
        run: |
          pacman -Syu --noconfirm \
            qemu-user-static-binfmt qemu-user-static \
            dosfstools wget libarchive arch-install-scripts \
            parted tree fping

      - name: Create Image File
        run: |
          mkdir -p $(dirname $LOOP_IMAGE_PATH)
          fallocate -l $LOOP_IMAGE_SIZE $LOOP_IMAGE_PATH

      - name: Setup Loop Device
        run: |
          for i in $(seq 0 31); do
            [ ! -e /dev/loop$i ] && mknod -m660 /dev/loop$i b 7 $i || true
          done
          sleep 2
          ls -lh $LOOP_IMAGE_PATH || (echo "Missing image file" && exit 1)
          stat $LOOP_IMAGE_PATH || (echo "Stat failed" && exit 1)
          LOOP_DEVICE=$(losetup -fP ${LOOP_IMAGE_PATH} --show)
          echo "LOOP_DEVICE=${LOOP_DEVICE}" >> $GITHUB_ENV

      - name: Create Partitions
        run: |
          parted --script ${LOOP_DEVICE} mklabel msdos
          parted --script ${LOOP_DEVICE} mkpart primary fat32 1MiB 257MiB
          parted --script ${LOOP_DEVICE} mkpart primary ext4 257MiB 100%
          parted --script ${LOOP_DEVICE} set 1 boot on
          parted --script ${LOOP_DEVICE} print

      - name: Format Partitions
        run: |
          sleep 2
          lsblk --raw --output "NAME,MAJ:MIN" --noheadings ${LOOP_DEVICE} | tail -n +2 | while read dev node; do
            MAJ=$(echo $node | cut -d: -f1)
            MIN=$(echo $node | cut -d: -f2)
            [ ! -e "/dev/$dev" ] && mknod "/dev/$dev" b $MAJ $MIN
          done
          sleep 2
          mkfs.vfat -F32 ${LOOP_DEVICE}p1 -n RPI64-BOOT
          mkfs.ext4 -q -E lazy_itable_init=0,lazy_journal_init=0 -F ${LOOP_DEVICE}p2 -L RPI64-ROOT

      - name: Mount Partitions
        run: |
          mkdir -p ${WORKDIR_BASE}/root
          mount ${LOOP_DEVICE}p2 ${WORKDIR_BASE}/root
          mkdir -p ${WORKDIR_BASE}/root/boot
          mount ${LOOP_DEVICE}p1 ${WORKDIR_BASE}/root/boot

      - name: Network Check
        run: |
          echo "Checking network connection..."
          fping -c 3 $IMAGE_HOST || (echo "Network check failed for $IMAGE_HOST!" && exit 1)
          echo "Network OK."

      - name: Download RPI image
        run: |
          TARBALL_FILENAME=$(basename "$ARCH_AARCH64_IMG_URL")
          MD5_FILENAME="${TARBALL_FILENAME}.md5"
          TARGET_FILE="${WORKDIR_BASE}/${TARBALL_FILENAME}"
          TARGET_MD5="${WORKDIR_BASE}/${MD5_FILENAME}"

          echo "Downloading from $ARCH_AARCH64_IMG_URL"
          curl -kfsSL -o "$TARGET_FILE" "$ARCH_AARCH64_IMG_URL"
          curl -kfsSL -o "$TARGET_MD5" "$ARCH_AARCH64_IMG_URL_MD5"

          md5sum -c "$TARGET_MD5"
