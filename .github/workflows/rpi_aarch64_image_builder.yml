name: Archlinux aarch64 Raspberry Pi Image Builder
on: [push]

permissions:
  contents: write

jobs:
  build-image:
    name: Build Archlinux aarch64 Raspberry Pi Image
    env:
      WORKDIR_BASE: ${{ github.workspace }}/run-${{ github.run_id }}
      LOOP_IMAGE_SIZE: 4G
      LOOP_IMAGE_PATH: ${{ github.workspace }}/run-${{ github.run_id }}/rpi_aarch64.img
    runs-on: ubuntu-latest
    container:
      image: archlinux:latest
      options: --privileged
    environment: main
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Export build_config.env to GITHUB_ENV
      run: |
        while read line; do
          echo "$line" >> $GITHUB_ENV
        done < build_config.env

    - name: Install dependencies
      run: |
        pacman -Syu --noconfirm qemu-user-static-binfmt qemu-user-static dosfstools wget libarchive arch-install-scripts parted tree fping

    - name: Create Image File
      run: |
        mkdir -p $(dirname $LOOP_IMAGE_PATH)
        fallocate -l $LOOP_IMAGE_SIZE $LOOP_IMAGE_PATH
  
    - name: Setup Loop Device
      run: |
        for i in $(seq 0 31); do
          [ ! -e /dev/loop$i ] && mknod -m660 /dev/loop$i b 7 $i || true
        done
        sleep 2
        ls -lh $LOOP_IMAGE_PATH || (echo "Missing image file" && exit 1)
        stat $LOOP_IMAGE_PATH || (echo "Stat failed" && exit 1)
        LOOP_DEVICE=$(losetup -fP ${LOOP_IMAGE_PATH} --show)
        echo "Loop device is ${LOOP_DEVICE}"
        echo "LOOP_DEVICE=${LOOP_DEVICE}" >> $GITHUB_ENV

    - name: Create Partitions
      run: |
        parted --script ${LOOP_DEVICE} mklabel msdos
        parted --script ${LOOP_DEVICE} mkpart primary fat32 1MiB 257MiB
        parted --script ${LOOP_DEVICE} mkpart primary ext4 257MiB 100%
        parted --script ${LOOP_DEVICE} set 1 boot on
        parted --script ${LOOP_DEVICE} print

    - name: Format Partitions
      run: |
        sleep 2
        lsblk --raw --output "NAME,MAJ:MIN" --noheadings ${LOOP_DEVICE} | tail -n +2 | while read dev node; do
          MAJ=$(echo $node | cut -d: -f1)
          MIN=$(echo $node | cut -d: -f2)
          [ ! -e "/dev/$dev" ] && mknod "/dev/$dev" b $MAJ $MIN
        done
        sleep 2
        mkfs.vfat -F32 ${LOOP_DEVICE}p1 -n RPI64-BOOT
        mkfs.ext4 -q -E lazy_itable_init=0,lazy_journal_init=0 -F ${LOOP_DEVICE}p2 -L RPI64-ROOT

    - name: Mount Partitions
      run: |
        sleep 2
        mkdir -p ${WORKDIR_BASE}/root
        mount ${LOOP_DEVICE}p2 ${WORKDIR_BASE}/root
        mkdir -p ${WORKDIR_BASE}/root/boot
        mount ${LOOP_DEVICE}p1 ${WORKDIR_BASE}/root/boot

    - name: Network Check
      run: |
        echo "Checking network connection..."
        fping -c 3 ${IMAGE_HOST} || (echo "Network check failed for ${IMAGE_HOST}!" && exit 1)
        echo "Network connection works successfully."

    - name: Download RPI image
      run: |
        # Extract the filename from the URL
        TARBALL_FILENAME=$(basename "$ARCH_AARCH64_IMG_URL")
        MD5_FILENAME="${TARBALL_FILENAME}.md5"
        
        # Define target paths using variables
        TARGET_FILE="${WORKDIR_BASE}/${TARBALL_FILENAME}"
        TARGET_MD5="${WORKDIR_BASE}/${MD5_FILENAME}"
        
        echo "Downloading from $ARCH_AARCH64_IMG_URL"
        echo "Target: $TARGET_FILE"
        
        # Download files
        curl -kfsSL -o "$TARGET_FILE" "$ARCH_AARCH64_IMG_URL"
        curl -kfsSL -o "$TARGET_MD5" "$ARCH_AARCH64_IMG_URL_MD5"
        
        # Verify download
        md5sum -c "$TARGET_MD5"